export const getCoordinatesByQuery = async (
  query: string
): Promise<{ lat: number; lon: number } | null> => {
  try {
    const trimmedQuery = query.trim();

    // üîÅ –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    let params = new URLSearchParams({
      format: 'json',
      limit: '1',
      q: trimmedQuery,
    });

    let response = await fetch(
      `https://nominatim.openstreetmap.org/search?${params.toString()}`,
      { headers: { 'Accept-Language': 'en' } }
    );

    let data = await response.json();
    if (data.length > 0) {
      return { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) };
    }

    // üîÅ –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2 ‚Äî –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∫ postalcode + country
    const match = trimmedQuery.match(/^(\d{4,6}),?\s*(\w+)?$/);
    if (match) {
      const postalcode = match[1];
      const country = match[2] || ''; // –ª–∏–±–æ —É–∫–∞–∑–∞–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç
      if (!country) {
        throw new Error('–î–æ–¥–∞–π—Ç–µ –∫—Ä–∞—ó–Ω—É, –Ω–∞–ø—Ä. "12557, Germany"');
      }

      params = new URLSearchParams({
        format: 'json',
        limit: '1',
        postalcode,
        country,
      });

      response = await fetch(
        `https://nominatim.openstreetmap.org/search?${params.toString()}`,
        { headers: { 'Accept-Language': 'en' } }
      );

      data = await response.json();
      if (data.length > 0) {
        return { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) };
      }
    }

    throw new Error('–ú—ñ—Å—Ç–æ –∞–±–æ —ñ–Ω–¥–µ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  } catch (error: any) {
    console.error('Geo error:', error);
    throw error;
  }
};
